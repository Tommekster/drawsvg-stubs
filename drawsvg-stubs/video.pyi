"""
This type stub file was generated by pyright.
"""

def delay_import_np_imageio(): # -> tuple[Module("numpy"), Module("imageio")]:
    ...

class RasterVideo:
    def __init__(self, video_data=..., video_file=..., *, _file_handle=..., mime_type=...) -> None:
        ...
    
    def save_video(self, fname): # -> None:
        ...
    
    @staticmethod
    def from_frames(svg_or_raster_frames, to_file=..., fps=..., *, mime_type=..., file_type=..., _file_handle=..., video_args=..., verbose=...): # -> RasterVideo:
        ...
    
    def as_data_uri(self): # -> str:
        ...
    


def render_svg_frames(frames, align_bottom=..., align_right=..., bg=..., verbose=..., **kwargs): # -> list[Unknown]:
    ...

def save_video(frames, file, verbose=..., **kwargs): # -> None:
    '''
    Save a series of drawings as a GIF or video.

    Arguments:
        frames: A list of `Drawing`s or a list of `numpy.array`s.
        file: File name or file like object to write the video to.  The
            extension determines the output format.
        align_bottom: If frames are different sizes, align the bottoms of each
            frame in the video.
        align_right: If frames are different sizes, align the right edge of each
            frame in the video.
        bg: If frames are different sizes, fill the background with this color.
            (default is white: (255, 255, 255, 255))
        duration: If writing a GIF, sets the duration of each frame.
        fps: If writing a video, sets the frame rate in FPS.
        **kwargs: Other arguments to imageio.mimsave().

    '''
    ...

def render_spritesheet(frames, row_length=..., verbose=..., **kwargs):
    '''
    Save a series of drawings as a bitmap spritesheet

    Arguments:
        frames: A list of `Drawing`s or a list of `numpy.array`s.
        row_length: The length (in frames) of one row in the spritesheet.
            If not provided, all frames go on one row.
        align_bottom: If frames are different sizes, align the bottoms of each
            frame in the video.
        align_right: If frames are different sizes, align the right edge of each
            frame in the video.
        bg: If frames are different sizes, fill the background with this color.
            (default is white: (255, 255, 255, 255))
        **kwargs: Other arguments to imageio.imsave().

    '''
    ...

def save_spritesheet(frames, file, row_length=..., verbose=..., **kwargs): # -> None:
    '''
    Save a series of drawings as a bitmap spritesheet

    Arguments:
        frames: A list of `Drawing`s or a list of `numpy.array`s.
        file: File name or file like object to write the spritesheet to.  The
            extension determines the output format.
        row_length: The length (in frames) of one row in the spritesheet.
            If not provided, all frames go on one row.
        align_bottom: If frames are different sizes, align the bottoms of each
            frame in the video.
        align_right: If frames are different sizes, align the right edge of each
            frame in the video.
        bg: If frames are different sizes, fill the background with this color.
            (default is white: (255, 255, 255, 255))
        **kwargs: Other arguments to imageio.imsave().

    '''
    ...

