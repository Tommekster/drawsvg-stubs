"""
This type stub file was generated by pyright.
"""

import dataclasses
from typing import Any, Callable, Dict, List, Optional, Union

@dataclasses.dataclass
class SyncedAnimationConfig:
    duration: float
    start_delay: float = ...
    end_delay: float = ...
    repeat_count: Union[int, str] = ...
    fill: str = ...
    freeze_frame_at: Optional[float] = ...
    show_playback_progress: bool = ...
    show_playback_controls: bool = ...
    pause_on_load: bool = ...
    controls_width: Optional[float] = ...
    controls_height: float = ...
    controls_x: Optional[float] = ...
    controls_center_y: Optional[float] = ...
    bar_thickness: float = ...
    bar_hpad: float = ...
    bar_color: str = ...
    bar_past_color: str = ...
    knob_rad: float = ...
    knob_fill: str = ...
    pause_width: float = ...
    pause_corner_rad: float = ...
    pause_color: str = ...
    pause_icon_color: str = ...
    controls_js: str = ...
    controls_js_onload: str = ...
    controls_draw_function: Callable[[SyncedAnimationConfig, bool], Group] = ...
    @property
    def total_duration(self): # -> float:
        ...
    
    def extra_css(self, d, context): # -> list[Unknown]:
        ...
    
    def extra_javascript(self, d, context): # -> list[str] | list[Unknown]:
        ...
    
    def extra_onload_js(self, d, context): # -> list[str] | list[Unknown]:
        ...
    
    def extra_drawing_elements(self, d, context): # -> list[Unknown]:
        ...
    
    def override_args(self, args, lcontext): # -> dict[Unknown, Unknown]:
        ...
    


@dataclasses.dataclass
class AnimatedAttributeTimeline:
    name: str
    animate_attrs: Optional[Dict[str, Any]] = ...
    times: List[float] = ...
    values: List[Any] = ...
    def __post_init__(self): # -> None:
        ...
    
    def append(self, time, value): # -> None:
        ...
    
    def extend(self, times, values): # -> None:
        ...
    
    def interpolate_at_time(self, at_time): # -> Any | Literal[0]:
        ...
    
    def as_animate_element(self, config: Optional[SyncedAnimationConfig] = ...): # -> Animate:
        ...
    


class AnimationHelperData:
    def __init__(self) -> None:
        ...
    
    def add_key_frame(self, time, animation_args=..., **attr_values): # -> None:
        ...
    
    def add_attribute_key_sequence(self, attr, times, values, *, animation_args=...): # -> None:
        ...
    
    def interpolate_at_time(self, at_time): # -> dict[Unknown, Unknown]:
        ...
    
    def children_with_context(self, lcontext=...): # -> list[Unknown]:
        ...
    


def linear_interpolate_value(times, values, at_time): # -> Literal[0]:
    ...

def animate_element_sequence(times, element_sequence): # -> None:
    '''Animate a list of elements to appear one-at-a-time in sequence.

    Elements should already be added to the drawing before using this.
    '''
    ...

def animate_text_sequence(container, times: List[float], values: List[str], *text_args, kwargs_list=..., **text_kwargs): # -> None:
    '''Animate a sequence of text to appear one-at-a-time in sequence.

    Multiple `Text` elements will be appended to the given `container`.
    '''
    ...

