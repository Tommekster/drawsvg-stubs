"""
This type stub file was generated by pyright.
"""

from typing import Iterable, Literal, SupportsIndex
from _typeshed import FileDescriptorOrPath
from . import types
from . import raster
from . import video

XML_HEADER = ...
SVG_START = ...
SVG_END = ...
SVG_CSS_FMT = ...
SVG_JS_FMT = ...


class Drawing:
    """
    A vector drawing.

    Append shapes and other elements with `.append()`.  The default coordinate
    system origin is at the top-left corner with x-values increasing to the
    right and y-values increasing downward.

    Supports Jupyter: If a Drawing is the last line of a cell, it will be
    displayed as an SVG below.
    """

    context: types.Context
    width: float
    height: float
    view_box: tuple[float, float, float, float]
    elements: list[types.DrawingElement]
    ordered_elements: dict[int, types.DrawingElement]
    pixel_scale: float
    render_width: float | None
    render_height: float | None
    id_prefix: str

    def __init__(
        self,
        width: float,
        height: float,
        origin: Literal[
            "center", "top-left", "top-right", "bottom-left", "bottom-right"
        ]
        | tuple[float, float],
        context: types.Context = ...,
        animation_config=...,
        id_prefix: str = ...,
        **svg_args
    ) -> None: ...

    def set_render_size(self, w: float | None = ...,
                        h: float | None = ...) -> Drawing: ...

    def set_pixel_scale(self, s: float = ...) -> Drawing: ...

    def calc_render_size(self) -> tuple[float, float]: ...

    def draw(self, obj, *, z: int | None = ..., **kwargs) -> None:
        """Add any object that knows how to draw itself to the drawing.

        This object must implement the `to_drawables(**kwargs)` method
        that returns a `DrawingElement` or list of elements.
        """
        ...

    def append(self, element: types.DrawingElement, *, z: int | None = ...) -> None:
        """Add any `DrawingElement` to the drawing.

        Do not append a `DrawingDef` referenced by other elements.  These are
        included automatically.  Use `.append_def()` for an unreferenced
        `DrawingDef`.
        """
        ...

    def extend(
        self, iterable: Iterable[types.DrawingElement], *, z: int | None = ...) -> None: ...
    def insert(self, i: SupportsIndex,
               element: types.DrawingElement) -> None: ...

    def remove(self, element: types.DrawingElement) -> None: ...
    def clear(self) -> None: ...
    def index(self, *args, **kwargs) -> int: ...
    def count(self, element: types.DrawingElement) -> int: ...
    def reverse(self) -> None: ...
    def draw_def(self, obj, **kwargs) -> None: ...
    def append_def(self, element): ...
    def append_title(self, text, **kwargs): ...
    def append_css(self, css_text) -> None: ...

    def embed_google_font(self, family, text=..., display=..., **kwargs) -> None:
        """Download SVG-embeddable CSS from Google fonts.

        Args:
            family: Name of font family or list of font families.
            text: The set of characters required from the font.  Only a font
                subset with these characters will be downloaded.
            display: The font-display CSS value.
            **kwargs: Other URL parameters sent to
                https://fonts.googleapis.com/css?...
        """
        ...

    def append_javascript(
        self, js_text: str, onload: str | None = ...
    ) -> None: ...

    def all_elements(self, context: types.Context | None = ...) -> list[types.DrawingElement]:
        """Return self.elements, self.ordered_elements, and extras as a single
        list.
        """
        ...

    def all_css(self, context: types.Context | None = ...): ...

    def all_javascript(
        self, context: types.Context | None = ...
    ) -> list[str]: ...

    def as_svg(
        self,
        output_file=...,
        randomize_ids=...,
        header=...,
        skip_js=...,
        skip_css=...,
        context=...,
    ) -> str | None: ...

    def as_html(
        self,
        output_file=...,
        title=...,
        randomize_ids=...,
        context=...,
        fix_embed_iframe=...,
    ) -> str | None: ...

    def save_svg(
        self, fname: FileDescriptorOrPath, encoding: str = ..., context: types.Context | None = ...
    ) -> None: ...

    def save_html(
        self, fname: FileDescriptorOrPath, title: str | None = ..., encoding: str = ..., context: types.Context | None = ...
    ) -> None: ...

    def save_png(self, fname: FileDescriptorOrPath,
                 context: types.Context | None = ...) -> None: ...

    def rasterize(self, to_file: FileDescriptorOrPath = ...,
                  context: types.Context | None = ...) -> raster.Raster: ...

    # -> list[Unknown]:
    def as_animation_frames(self, fps=..., duration=..., context=...):
        """Returns a list of synced animation frames that can be converted to a
        video."""
        ...

    def save_video(
        self,
        fname,
        fps=...,
        duration=...,
        mime_type=...,
        file_type=...,
        context=...,
        verbose=...,
    ) -> None: ...

    def save_gif(
        self, fname, fps=..., duration=..., context=..., verbose=...
    ) -> None: ...

    def save_mp4(
        self, fname, fps=..., duration=..., context=..., verbose=...
    ) -> None: ...

    def save_spritesheet(
        self, fname, fps=..., duration=..., context=..., row_length=..., verbose=...
    ) -> None: ...

    def as_video(
        self,
        to_file=...,
        fps=...,
        duration=...,
        mime_type=...,
        file_type=...,
        context=...,
        verbose=...,
    ) -> video.RasterVideo: ...

    def as_gif(
        self, to_file=..., fps=..., duration=..., context=..., verbose=...
    ) -> video.RasterVideo: ...

    def as_mp4(
        self, to_file=..., fps=..., duration=..., context=..., verbose=...
    ) -> video.RasterVideo: ...

    def as_spritesheet(
        self,
        to_file=...,
        fps=...,
        duration=...,
        context=...,
        row_length=...,
        verbose=...,
    ) -> raster.Raster: ...

    def display_inline(self, context=...):  # -> JupyterSvgInline:
        """Display inline in the Jupyter web page."""
        ...

    def display_iframe(self, context=...):  # -> JupyterSvgFrame:
        """Display within an iframe the Jupyter web page."""
        ...

    def display_image(self, context=...):  # -> JupyterSvgImage:
        """Display within an img in the Jupyter web page."""
        ...
