"""
This type stub file was generated by pyright.
"""

from .elements import DrawingParentElement

class DrawingDef(DrawingParentElement):
    '''Parent class of SVG nodes that must be direct children of <defs>.'''
    def get_svg_defs(self): # -> tuple[Self@DrawingDef]:
        ...
    


class DrawingDefSub(DrawingParentElement):
    '''Parent class of SVG nodes that are meant to be descendants of a Def.'''
    ...


class LinearGradient(DrawingDef):
    '''
    A linear gradient to use as a fill or other color.

    Has <stop> nodes as children, added with `.add_stop()`.
    '''
    TAG_NAME = ...
    def __init__(self, x1, y1, x2, y2, gradientUnits=..., **kwargs) -> None:
        ...
    
    def add_stop(self, offset, color, opacity=..., **kwargs): # -> GradientStop:
        ...
    


class RadialGradient(DrawingDef):
    '''
    A radial gradient to use as a fill or other color.

    Has <stop> nodes as children, added with `.add_stop()`.
    '''
    TAG_NAME = ...
    def __init__(self, cx, cy, r, gradientUnits=..., fy=..., **kwargs) -> None:
        ...
    
    def add_stop(self, offset, color, opacity=..., **kwargs): # -> GradientStop:
        ...
    


class GradientStop(DrawingDefSub):
    '''A control point for a radial or linear gradient.'''
    TAG_NAME = ...
    has_content = ...


class Pattern(DrawingDef):
    '''
    A repeating pattern of other drawing elements to use as a fill or other
    color.

    Width and height specify the repetition period.  Append regular drawing
    elements to create the pattern.
    '''
    TAG_NAME = ...
    def __init__(self, width, height, x=..., y=..., patternUnits=..., **kwargs) -> None:
        ...
    


class ClipPath(DrawingDef):
    '''
    A shape used to crop another element by not drawing outside of this shape.

    Has regular drawing elements as children.
    '''
    TAG_NAME = ...


class Mask(DrawingDef):
    '''
    A drawing where the gray value and transparency are used to control the
    transparency of another shape.

    Has regular drawing elements as children.
    '''
    TAG_NAME = ...


class Filter(DrawingDef):
    '''
    A filter to apply to geometry.

    For example a blur filter.
    '''
    TAG_NAME = ...


class FilterItem(DrawingDefSub):
    '''A child of Filter with any tag name.'''
    def __init__(self, tag_name, **args) -> None:
        ...
    


class Marker(DrawingDef):
    '''
    A small drawing that can be placed at the ends of (or along) a path.

    This can be used for arrow heads or points on a graph for example.
    By default, units are multiples of stroke width.
    '''
    TAG_NAME = ...
    def __init__(self, minx, miny, maxx, maxy, scale=..., orient=..., **kwargs) -> None:
        ...
    


