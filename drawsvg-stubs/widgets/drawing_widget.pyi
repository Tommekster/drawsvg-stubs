"""
This type stub file was generated by pyright.
"""

from ipywidgets import widgets

class DrawingWidget(widgets.DOMWidget):
    _model_name = ...
    _model_module = ...
    _model_module_version = ...
    _view_name = ...
    _view_module = ...
    _view_module_version = ...
    _image = ...
    _mousemove_blocked = ...
    _frame_blocked = ...
    throttle = ...
    disable = ...
    frame_delay = ...
    def __init__(self, drawing, throttle=..., disable=..., frame_delay=...) -> None:
        '''An interactive Jupyter notebook widget.

        This works similarly to displaying a Drawing as a cell output but
        DrawingWidget can register callbacks for user mouse events.  Within a
        callback modify the drawing then call .refresh() to update the output in
        real time.

        Arguments:
            drawing: The initial Drawing to display.  Call .refresh() after
                modifying or just assign a new Drawing.
            throttle: If True, limit the rate of mousemove events.  For drawings
                with many elements, this will significantly reduce lag.
            disable: While True, mouse events will be disabled.
            frame_delay: If greater than or equal to zero, a timed callback will
                occur frame_delay milliseconds after the previous drawing
                update.
        '''
        ...
    
    @property
    def drawing(self):
        ...
    
    @drawing.setter
    def drawing(self, drawing): # -> None:
        ...
    
    def refresh(self): # -> None:
        '''
        Redraw the displayed output with the current value of self.drawing.
        '''
        ...
    
    def mousedown(self, handler, remove=...): # -> None:
        '''
        Register (or unregister) a handler for the mousedown event.

        Arguments:
            remove: If True, unregister, otherwise register.
        '''
        ...
    
    def mousemove(self, handler, remove=...): # -> None:
        '''
        Register (or unregister) a handler for the mousemove event.

        Arguments:
            remove: If True, unregister, otherwise register.
        '''
        ...
    
    def mouseup(self, handler, remove=...): # -> None:
        '''
        Register (or unregister) a handler for the mouseup event.

        Arguments:
            remove: If True, unregister, otherwise register.
        '''
        ...
    
    def timed(self, handler, remove=...): # -> None:
        '''
        Register (or unregister) a handler for the timed event.

        Arguments:
            remove: If True, unregister, otherwise register.
        '''
        ...
    
    def on_exception(self, handler, remove=...): # -> None:
        '''
        Register (or unregister) a handler for exceptions in other handlers.

        If any handler returns True, the exception is suppressed.

        Arguments:
            remove: If True, unregister, otherwise register.
        '''
        ...
    


