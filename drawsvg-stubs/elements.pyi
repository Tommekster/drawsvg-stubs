"""
This type stub file was generated by pyright.
"""

from typing import Any, Literal
from .types import DrawingBasicElement, DrawingElement, DrawingParentElement


def escape_cdata(content):
    ...


class NoElement(DrawingElement):
    ''' A drawing element that has no effect '''

    def __init__(self) -> None:
        ...

    # -> None:
    def write_svg_element(self, id_map, is_duplicate, output_file, dry_run, lcontext, force_dup=...):
        ...

    def __eq__(self, other) -> bool:
        ...


class Group(DrawingParentElement):
    '''A group of drawing elements.

    Any transform will apply to its children and other attributes will be
    inherited by its children.
    '''
    TAG_NAME = ...


class Raw(DrawingElement):
    '''Raw unescaped text to include in the SVG output.

    Special XML characters like '<' and '&' in the content may have unexpected
    effects or completely break the resulting SVG.
    '''
    has_content = ...

    def __init__(self, content, defs=...) -> None:
        ...

    # -> None:
    def write_svg_element(self, id_map, is_duplicate, output_file, lcontext, dry_run, force_dup=...):
        ...

    def get_svg_defs(self):
        ...

    def check_children_allowed(self):
        ...


class Use(DrawingBasicElement):
    '''A copy of another element, drawn at a given position

    The referenced element becomes an SVG def shared between all Use elements
    that reference it.  Useful for drawings with many copies of similar shapes.
    Additional arguments like `fill='red'` will be used as the default for this
    copy of the shapes.
    '''
    TAG_NAME = ...

    def __init__(self, other_elem, x, y, **kwargs) -> None:
        ...


class Animate(DrawingBasicElement):
    '''Animation for a specific property of another element.

    This should be added as a child of the element to animate.  Otherwise the
    referenced other element and this element must both be added to the drawing.

    Useful SVG attributes:
    - repeatCount: 0, 1, ..., 'indefinite'
    '''
    TAG_NAME = ...

    def __init__(self, attributeName, dur, from_or_values=..., to=..., begin=..., other_elem=..., **kwargs) -> None:
        ...

    def get_svg_defs(self):  # -> list[DrawingElement]:
        ...

    def get_linked_elems(self):  # -> tuple[Unknown] | tuple[()]:
        ...


class _Mpath(DrawingBasicElement):
    '''Used by AnimateMotion.'''
    TAG_NAME = ...

    def __init__(self, other_path, **kwargs) -> None:
        ...


class AnimateMotion(Animate):
    '''Animation for the motion of another element along a path.

    This should be added as a child of the element to animate.  Otherwise the
    referenced other element and this element must both be added to the drawing.
    '''
    TAG_NAME = ...

    def __init__(self, path, dur, from_or_values=..., to=..., begin=..., other_elem=..., **kwargs) -> None:
        ...


class AnimateTransform(Animate):
    '''Animation for the transform property of another element.

    This should be added as a child of the element to animate.  Otherwise the
    referenced other element and this element must both be added to the drawing.
    '''
    TAG_NAME = ...

    def __init__(self, type, dur, from_or_values, to=..., begin=..., attributeName=..., other_elem=..., **kwargs) -> None:
        ...


class Set(Animate):
    '''Animation for a specific property of another element that sets the new
    value without a transition.

    This should be added as a child of the element to animate.  Otherwise the
    referenced other element and this element must both be added to the drawing.
    '''
    TAG_NAME = ...

    def __init__(self, attributeName, dur, to=..., begin=..., other_elem=..., **kwargs) -> None:
        ...


class Discard(Animate):
    '''Animation configuration specifying when it is safe to discard another
    element.

    Use this when an element will no longer be visible after an animation.
    This should be added as a child of the element to animate.  Otherwise the
    referenced other element and this element must both be added to the drawing.
    '''
    TAG_NAME = ...

    def __init__(self, attributeName, begin=..., **kwargs) -> None:
        ...


class Image(DrawingBasicElement):
    '''A linked or embedded image.'''
    TAG_NAME = ...
    MIME_MAP = ...
    MIME_DEFAULT = ...

    def __init__(self, x, y, width, height, path=..., data=..., embed=..., mime_type=..., **kwargs) -> None:
        '''
        Specify either the path or data argument.  If path is used and embed is
        True, the image file is embedded in a data URI.
        '''
        ...


class Text(DrawingParentElement):
    '''A line or multiple lines of text, optionally placed along a path.

    Additional keyword arguments are output as additional arguments to the SVG
    node e.g. fill='red', font_size=20, letter_spacing=1.5.

    Useful SVG attributes:
    - text_anchor: start, middle, end
    - dominant_baseline:
        auto, central, middle, hanging, text-top, mathematical, ...
    See https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text

    CairoSVG bug with letter spacing text on a path: The first two letters are
    always spaced as if letter_spacing=1.
    '''
    TAG_NAME = ...
    has_content = ...

    # -> Group | Self@Text:
    def __new__(cls, text, *args, path=..., id=..., _skip_check=..., **kwargs):
        ...

    def __init__(
        self,
        text: str,
        font_size: str | float,
        x: str | float = ...,
        y: str | float = ...,
        *,
        center: bool = ...,
        line_height: float = ...,
        line_offset: float = ...,
        path: Path | None = ...,
        start_offset=...,
        path_args=...,
        tspan_args=...,
        cairo_fix=...,
        _skip_check=...,
        transform: str = ...,
        **kwargs: Any
    ) -> None:
        ...

    # -> None:
    def write_content(self, id_map, is_duplicate, output_file, lcontext, dry_run):
        ...

    # -> None:
    def write_children_content(self, id_map, is_duplicate, output_file, lcontext, dry_run):
        ...

    def append_line(self, line, **kwargs):  # -> None:
        ...


class _TextPath(DrawingParentElement):
    TAG_NAME = ...
    has_content = ...

    def __init__(self, path, **kwargs) -> None:
        ...


class _TextContainingElement(DrawingBasicElement):
    ''' A private parent class used for elements that only have plain text
        content. '''
    has_content: Literal[True] = ...
    escaped_text: str

    def __init__(
        self,
        text: str,
        x: str | float = ...,
        y: str | float = ...,
        fill: str = ...,
        font_family: str = ...,
        font_size: str | float = ...,
        **kwargs
    ) -> None:
        ...

    # -> None:
    def write_content(self, id_map, is_duplicate, output_file, lcontext, dry_run):
        ...


class TSpan(_TextContainingElement):
    ''' A line of text within the Text element. '''
    TAG_NAME: Literal["tspan"] = ...


class Title(_TextContainingElement):
    '''A title element.

    This element can be appended with shape.append_title("Your title!"), which
    can be useful for adding a tooltip or on-hover text display to an element.
    '''
    TAG_NAME = ...


class Rectangle(DrawingBasicElement):
    '''A rectangle.

    Additional keyword arguments are output as additional arguments to the SVG
    node e.g. fill="red", stroke="#ff4477", stroke_width=2.
    '''
    TAG_NAME = ...

    def __init__(self, x, y, width, height, **kwargs) -> None:
        ...


class Circle(DrawingBasicElement):
    '''A circle.

    Additional keyword arguments are output as additional arguments to the SVG
    node e.g. fill="red", stroke="#ff4477", stroke_width=2.
    '''
    TAG_NAME = ...

    def __init__(self, cx, cy, r, **kwargs) -> None:
        ...


class Ellipse(DrawingBasicElement):
    '''An ellipse.

    Additional keyword arguments are output as additional arguments to the SVG
    node e.g. fill="red", stroke="#ff4477", stroke_width=2.
    '''
    TAG_NAME = ...

    def __init__(self, cx, cy, rx, ry, **kwargs) -> None:
        ...


class ArcLine(Circle):
    '''An arc.

    In most cases, use Arc instead of ArcLine.  ArcLine uses the
    stroke-dasharray SVG property to make the edge of a circle look like an arc.

    Additional keyword arguments are output as additional arguments to the SVG
    node e.g. fill="red", stroke="#ff4477", stroke_width=2.
    '''

    def __init__(self, cx, cy, r, start_deg, end_deg, **kwargs) -> None:
        ...


class Path(DrawingBasicElement):
    '''An arbitrary path.

    Path Supports building an SVG path by calling instance methods corresponding
    to path commands.

    Complete descriptions of path commands:
    https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#path_commands

    Additional keyword arguments are output as additional arguments to the SVG
    node e.g. fill="red", stroke="#ff4477", stroke_width=2.
    '''
    TAG_NAME = ...

    def __init__(self, d=..., **kwargs) -> None:
        ...

    def append(self, command_str, *args):  # -> Self@Path:
        ...

    def M(self, x, y):  # -> Self@Path:
        '''Start a new curve section from this point.'''
        ...

    def m(self, dx, dy):  # -> Self@Path:
        '''Start a new curve section from this point (relative coordinates).'''
        ...

    def L(self, x, y):  # -> Self@Path:
        '''Draw a line to this point.'''
        ...

    def l(self, dx, dy):  # -> Self@Path:
        '''Draw a line to this point (relative coordinates).'''
        ...

    def H(self, x):  # -> Self@Path:
        '''Draw a horizontal line to this x coordinate.'''
        ...

    def h(self, dx):  # -> Self@Path:
        '''Draw a horizontal line to this relative x coordinate.'''
        ...

    def V(self, y):  # -> Self@Path:
        '''Draw a horizontal line to this y coordinate.'''
        ...

    def v(self, dy):  # -> Self@Path:
        '''Draw a horizontal line to this relative y coordinate.'''
        ...

    def Z(self):  # -> Self@Path:
        '''Draw a line back to the previous m or M point.'''
        ...

    def C(self, cx1, cy1, cx2, cy2, ex, ey):  # -> Self@Path:
        '''Draw a cubic Bezier curve.'''
        ...

    def c(self, cx1, cy1, cx2, cy2, ex, ey):  # -> Self@Path:
        '''Draw a cubic Bezier curve (relative coordinates).'''
        ...

    def S(self, cx2, cy2, ex, ey):  # -> Self@Path:
        '''Draw a cubic Bezier curve, transitioning smoothly from the previous.
        '''
        ...

    def s(self, cx2, cy2, ex, ey):  # -> Self@Path:
        '''Draw a cubic Bezier curve, transitioning smoothly from the previous
        (relative coordinates).
        '''
        ...

    def Q(self, cx, cy, ex, ey):  # -> Self@Path:
        '''Draw a quadratic Bezier curve.'''
        ...

    def q(self, cx, cy, ex, ey):  # -> Self@Path:
        '''Draw a quadratic Bezier curve (relative coordinates).'''
        ...

    def T(self, ex, ey):  # -> Self@Path:
        '''Draw a quadratic Bezier curve, transitioning soothly from the
        previous.
        '''
        ...

    def t(self, ex, ey):  # -> Self@Path:
        '''Draw a quadratic Bezier curve, transitioning soothly from the
        previous (relative coordinates).
        '''
        ...

    def A(self, rx, ry, rot, large_arc, sweep, ex, ey):  # -> Self@Path:
        '''Draw a circular or elliptical arc.

        See
        https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#elliptical_arc_curve
        '''
        ...

    def a(self, rx, ry, rot, large_arc, sweep, ex, ey):  # -> Self@Path:
        '''Draw a circular or elliptical arc (relative coordinates).

        See
        https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#elliptical_arc_curve
        '''
        ...

    # -> Self@Path:
    def arc(self, cx, cy, r, start_deg, end_deg, cw=..., include_m=..., include_l=...):
        '''Draw a circular arc, controlled by center, radius, and start/end
        degrees.

        Angles rotate from the x-axis towards the positive y-axis.
        '''
        ...


class Lines(Path):
    '''A sequence of connected lines (or a polygon).

    Additional keyword arguments are output as additional arguments to the SVG
    node e.g. fill="red", stroke="#ff4477", stroke_width=2.
    '''

    def __init__(self, sx, sy, *points, close=..., **kwargs) -> None:
        ...


class Line(Lines):
    '''A simple line.

    Additional keyword arguments are output as additional arguments to the SVG
    node e.g. fill="red", stroke="#ff4477", stroke_width=2.
    '''

    def __init__(self, sx, sy, ex, ey, **kwargs) -> None:
        ...


class Arc(Path):
    '''A circular arc.

    Additional keyword arguments are output as additional arguments to the SVG
    node e.g. fill="red", stroke="#ff4477", stroke_width=2.
    '''

    def __init__(self, cx, cy, r, start_deg, end_deg, cw=..., **kwargs) -> None:
        ...
